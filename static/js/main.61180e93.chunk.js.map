{"version":3,"sources":["js/components/Card.jsx","js/components/Deck.jsx","js/App.js","serviceWorker.js","index.js"],"names":["Card","this","props","card","image","alt","cssTransform","className","style","transform","src","Component","BASE_API_URL","Deck","state","deck_id","drawnCards","remaining","handleClick","e","drawCard","generateRandom","vary","median","Math","random","Axios","get","res","setState","data","console","log","cards","value","suit","prevState","onClick","map","id","uuidv4","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8UAGqBA,G,6KACV,IAAD,EAC6BC,KAAKC,MAAMC,KAAxCC,EADA,EACAA,MAAOC,EADP,EACOA,IAAKC,EADZ,EACYA,aAEpB,OACC,kBAAC,WAAD,KACEF,GACA,yBACCG,UAAU,OACVC,MAAO,CACNC,UAAWH,GAEZI,IAAKN,EACLC,IAAG,UAAKA,U,GAboBM,c,QCG5BC,G,MAAe,wCAEAC,E,4MACpBC,MAAQ,CACPC,QAAS,GACTC,WAAY,GACZC,UAAW,G,EAeZC,YAAc,SAAAC,GACb,EAAKC,Y,EAiCNC,eAAiB,SAACC,EAAMC,GACvB,OAAOA,EAASC,KAAKC,SAAWH,G,2MA7CbI,IAAMC,IAAN,UAAaf,EAAb,iB,OAAZgB,E,OACN3B,KAAK4B,SAAS,CACbd,QAASa,EAAIE,KAAKf,QAClBE,UAAWW,EAAIE,KAAKb,Y,gDAGrBc,QAAQC,IAAI,mC,wSAUMN,IAAMC,IAAN,UACdf,GADc,OACCX,KAAKa,MAAMC,QADZ,W,OAAZa,E,SAGyBA,EAAIE,KAAKG,MAAM,GAAtCC,E,EAAAA,MAAO9B,E,EAAAA,MAAO+B,E,EAAAA,KACtBlC,KAAK4B,UAAS,SAAAO,GACb,MAAO,CACNpB,WAAW,GAAD,mBACNoB,EAAUpB,YADJ,CAET,CACCZ,MAAOA,EACPC,IAAI,GAAD,OAAK6B,EAAL,eAAiBC,GACpB7B,aAAa,UAAD,OAAY,EAAKe,eAC5B,IACA,IAFW,0BAGO,EAAKA,eACvB,GACA,IALW,eAMJ,EAAKA,eAAe,GAAI,IANpB,UASdJ,UAAWW,EAAIE,KAAKb,c,gDAItBc,QAAQC,IAAI,gC,8IASb,OACC,yBAAKzB,UAAU,QACd,yBAAKA,UAAU,cACd,wBAAIA,UAAU,SAAd,6BACA,wBAAIA,UAAU,kBAAd,mCACCN,KAAKa,MAAMG,UACX,4BAAQoB,QAASpC,KAAKiB,aAAtB,aAEA,8CAGF,yBAAKX,UAAU,aACbN,KAAKa,MAAME,WAAWsB,KAAI,SAAAnC,GAC1B,IAAMoC,EAAKC,cACX,OAAO,kBAAC,EAAD,CAAMrC,KAAMA,EAAMsC,IAAKF,EAAIA,GAAIA,a,GAxEV5B,aCInB+B,MARf,WACC,OACC,yBAAKnC,UAAU,OACd,kBAAC,EAAD,QCKiBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.61180e93.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport '../../css/Card.css';\r\n\r\nexport default class Card extends Component {\r\n\trender() {\r\n\t\tconst { image, alt, cssTransform } = this.props.card;\r\n\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t{image && (\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName=\"Card\"\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\ttransform: cssTransform\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tsrc={image}\r\n\t\t\t\t\t\talt={`${alt}`}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport Card from './Card';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport '../../css/Deck.css';\r\n\r\nconst BASE_API_URL = 'https://deckofcardsapi.com/api/deck/';\r\n\r\nexport default class Deck extends Component {\r\n\tstate = {\r\n\t\tdeck_id: '',\r\n\t\tdrawnCards: [],\r\n\t\tremaining: 0\r\n\t};\r\n\r\n\tasync componentDidMount() {\r\n\t\ttry {\r\n\t\t\tconst res = await Axios.get(`${BASE_API_URL}new/shuffle/`);\r\n\t\t\tthis.setState({\r\n\t\t\t\tdeck_id: res.data.deck_id,\r\n\t\t\t\tremaining: res.data.remaining\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log('axios failed retrieving deck id');\r\n\t\t}\r\n\t}\r\n\r\n\thandleClick = e => {\r\n\t\tthis.drawCard();\r\n\t};\r\n\r\n\tasync drawCard() {\r\n\t\ttry {\r\n\t\t\tconst res = await Axios.get(\r\n\t\t\t\t`${BASE_API_URL}${this.state.deck_id}/draw/`\r\n\t\t\t);\r\n\t\t\tconst { value, image, suit } = res.data.cards[0];\r\n\t\t\tthis.setState(prevState => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdrawnCards: [\r\n\t\t\t\t\t\t...prevState.drawnCards,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\timage: image,\r\n\t\t\t\t\t\t\talt: `${value} of ${suit}`,\r\n\t\t\t\t\t\t\tcssTransform: `rotate(${this.generateRandom(\r\n\t\t\t\t\t\t\t\t140,\r\n\t\t\t\t\t\t\t\t70\r\n\t\t\t\t\t\t\t)}deg) translate(${this.generateRandom(\r\n\t\t\t\t\t\t\t\t60,\r\n\t\t\t\t\t\t\t\t30\r\n\t\t\t\t\t\t\t)}px, ${this.generateRandom(60, 30)}px)`\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tremaining: res.data.remaining\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log('axios failed retrieving card');\r\n\t\t}\r\n\t}\r\n\r\n\tgenerateRandom = (vary, median) => {\r\n\t\treturn median - Math.random() * vary;\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Deck\">\r\n\t\t\t\t<div className=\"Deck-input\">\r\n\t\t\t\t\t<h1 className=\"title\">♦ Card Dealer ♦</h1>\r\n\t\t\t\t\t<h2 className=\"title subtitle\">♦ Simple React Demo ♦</h2>\r\n\t\t\t\t\t{this.state.remaining ? (\r\n\t\t\t\t\t\t<button onClick={this.handleClick}>Draw Card</button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<h1>No more cards</h1>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"card-area\">\r\n\t\t\t\t\t{this.state.drawnCards.map(card => {\r\n\t\t\t\t\t\tconst id = uuidv4();\r\n\t\t\t\t\t\treturn <Card card={card} key={id} id={id} />;\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport '../css/App.css';\r\nimport Deck from './components/Deck';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Deck />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './js/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}